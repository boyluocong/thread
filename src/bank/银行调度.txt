银行业务调度系统 

模拟实现银行业务调度系统逻辑，具体需求如下：

1. 银行有6个业务窗口，1-4号窗口为普通窗口，5号窗口为快速窗口，6号窗口为VIP窗口。

2. 有三种对应类型的客户：VIP客户、普通客户、快速客户(办理如交水电费、电话费之类业务的客户)。

3. 异步随机生成各种类型的客户，生成各类型用户的概率比率为：

    VIP客户：普通客户：快速客户=1：6：3

4. 客户办理业务所需时间有最大值和最小值，在该范围内随机设定每个VIP客户及普通客户办理业务所需的时间，快速客户办理业务所需的时间为最小值(办理业务的过程可通过线程sleep的方式来模拟)。

5. 各类型客户在其对应窗口按顺序依次办理业务。

6. 当VIP(6号)窗口和快速业务(5号)窗口没有客户等待办理业务的时候，这两个窗口可处理普通客户的业务，而一旦有对应的客户等待办理业务，则优先处理对应客户的业务。

7. 随机生成客户时间间隔，业务办理时间最大值和最小值可以设置。

8. 不要求实现GUI，只考虑系统逻辑实现，可通过log方式展现程序运行结果。

银行业务调度系统面向对象的分析与设计： 1. 有三种对应类型的客户：VIP客户、普通客户、快速客户，异步随机生成各类型的客户。

    每个客户其实是由银行的一个取号机器产生号码的方式来表示，所以，需要有一个号码管理器对象，让这个对象不断地产生号码，就等于随机生成了客户。

    三类客户的号码编排是完全独立的，所以系统一定要产生三个号码管理器对象，各自管理一类用户的排除号码。这三个号码管理器对象统一由一个号码机器进行管理，这个号码机器在整个系统中始终只能有一个，所以它要被设计成单例。 2. 各类型客户在其对应窗口按顺序依次办理业务，准备地说，应该是窗口依次叫号。

    服务窗口每次找号码管理器获取当前要被服务的号码。 从上面的分析可看出，代码实现肯定涉及多线程，实际项目中使用较多的是线程池技术，下面代码中也多次出现了Executors、ExecutorService对象及其方法调用，这里先将相关内容说明下： Executors

继承自Object，是java.util.concurrent包中的类，从jdk1.5版本开始有的。

Executors类中有多个静态方法可返回ExecutorService和ScheduledExecutorService对象：

public static ExecutorService newSingleThreadExecutor()，创建一个使用单个 worker 线程的 Executor，以无界队列方式来运行该线程。(注意，如果因为在关闭前的执行期间出现失败而终止了此单个线程，那么如果需要，一个新线程将代替它执行后续的任务)。可保证顺序地执行各个任务，并且在任意给定的时间不会有多个线程是活动的。与其他等效的newFixedThreadPool(1) 不同，可保证无需重新配置此方法所返回的执行程序即可使用其他的线程。

public static ExecutorService newFixedThreadPool(ing nThreads)，创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。在任意点，在大多数nThreads 线程会处于处理任务的活动状态。如果在所有线程处于活动状态时提交附加任务，则在有可用线程之前，附加任务将在队列中等待。如果在关闭前的执行期间由于失败而导致任何线程终止，那么一个新线程将代替它执行后续的任务(如果需要)。在某个线程被显式地关闭之前，池中的线程将一直存在。

public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)，创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。 ExecutorService

是java.util.concurrent包中的接口，从jdk1.5开始有的，它从Executor接口中继承了execute方法：

void execute(Runnable command)，在未来某个时间执行给定的命令。该命令可能在新的线程、已入池的线程或者正调用的线程中执行，这由ExecutorService的实现方式决定。 ScheduledExecutorService

是ExecutorService接口的子接口，可安排在给定的延迟后运行或定期执行的命令。

常用方法：
ScheduledFuture<?> schedudeAtFixedRate(Runnable commang,long initailDelay,long period,TimeUnit unit)， 创建并执行一个在给定初始延迟后首次启用的定期操作，后续操作具有给定的周期；也就是将在initailDelay后开始执行，然后在initailDelay+period后执行，接着在initailDelay+2*period后执行，依此类推。如果任务的任何一个执行遇到异常，则后续执行都会被取消。否则，只能通过执行程序的取消或终止方法来终止该任务。如果此任务的任何一个执行要花费比其周期更长的时间，则将推迟后续执行，但不会同时执行。

ScheduledFuture<?> ScheduleWithFixedDelay(Runnable command, long initialDelay, long delay, TimeUnit unit)，创建并执行一个在给定初始延迟后首次启用的定期操作，随后，在每一次执行终止和下一次执行开始之间都存在给定的延迟。如果任务的任一执行遇到异常，就会取消后续执行。否则，只能通过执行程序的取消或终止方法来终止该任务。